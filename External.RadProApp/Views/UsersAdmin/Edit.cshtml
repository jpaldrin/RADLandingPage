@model External.RadProApp.Models.EditUserViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}


<div class="container">
    @using (Html.BeginForm("Edit", "UsersAdmin", FormMethod.Post, new { enctype = "multipart/form-data", @id = "registrationForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.Id)
        <div class="row">
            <div class="col-sm-3">
                <!--left col-->
                <div class="text-center">
                    @if (Model.ImageMimeType != null)
                    {
                        <img src="@Url.Action("GetImage", "UsersAdmin", new { @id = Model.Id })" class="avatar rounded-circle img-thumbnail" alt="avatar" />
                    }
                    else
                    {
                        <img src="http://ssl.gstatic.com/accounts/ui/avatar_2x.png" class="avatar rounded-circle img-thumbnail" alt="avatar">
                    }

                    <h6>edit photo...</h6>
                    <input type="file" name="Image" class="text-center center-block file-upload text-sm-left">
                </div><br>
                <ul class="list-group">
                    @Html.Label("How far do you travel?")

                    <li class="list-group-item text-left">
                        <p>Update Range in (*Miles)</p>
                        @Html.TextBoxFor(model => model.Radius, new { htmlAttributes = new { @class = "form-control", @aria_label = "Range", @aria_describedby = "inputGroup-sizing-default", @id = "newRadius", @Value = @Request["#setRadius"] } })
                    </li>
                </ul>
            </div>
            <div class="col-sm-9">
                <div class="row">
                    <h5 class="text-dark">Estimate Travel Distance</h5>
                    <script src="https://maps.google.com/maps/api/js?v=3&language=en&amp;key=@ViewBag.GoogleApiKey"></script>
                    <div id="map-canvas" style="height:350px; width: 100%;"></div>
                </div>
                <br />
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">First</span>
                    </div>
                    @Html.EditorFor(model => model.FName, new { htmlAttributes = new { @class = "form-control", @aria_label = "Sizing example input", @aria_describedby = "inputGroup-sizing-default" } })
                    @Html.ValidationMessageFor(model => model.FName, "", new { @class = "text-danger" })
                </div>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">Last</span>
                    </div>
                    @Html.EditorFor(model => model.LName, new { htmlAttributes = new { @class = "form-control", @aria_label = "Sizing example input", @aria_describedby = "inputGroup-sizing-default" } })
                    @Html.ValidationMessageFor(model => model.LName, "", new { @class = "text-danger" })
                </div>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">☎</span>
                    </div>
                    @Html.EditorFor(model => model.Telephone, new { htmlAttributes = new { @class = "form-control", @aria_label = "Telephone", @aria_describedby = "inputGroup-sizing-default", @id = "phoneNumber1" } })
                    @Html.ValidationMessageFor(model => model.Telephone, "", new { @class = "text-danger" })
                </div>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">Email</span>
                    </div>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @aria_label = "Email", @aria_describedby = "addon-wrapping" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">Lat</span>
                    </div>
                    @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", @aria_label = "Latitude", @aria_describedby = "addon-wrapping", @Id = "latitude" } })
                    @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                </div>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">Log</span>
                    </div>
                    @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control", @aria_label = "Longitude", @aria_describedby = "addon-wrapping", @Id = "longitude" } })
                    @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                </div>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">Address</span>
                    </div>
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @aria_label = "Address", @aria_describedby = "addon-wrapping" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">City</span>
                    </div>
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", @aria_label = "City", @aria_describedby = "addon-wrapping" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">State</span>
                    </div>
                    @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control", @aria_label = "State", @aria_describedby = "addon-wrapping" } })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
                <div class="input-group input-group-sm mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width:100px;" id="inputGroup-sizing-sm">Post</span>
                    </div>
                    @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control", @aria_label = "PostalCode", @aria_describedby = "addon-wrapping" } })
                    @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
                </div>

                <div class="row">
                    <b>Which best describes you?</b>
                    <hr />
                    <div>
                        @foreach (var item in Model.RolesList)
                        {
                            <ul style="list-style: none; display: inline-block;">
                                <li>
                                    <input type="checkbox" name="SelectedRole" value="@item.Value" checked="@item.Selected" class="checkbox-inline check_role" />
                                    @Html.Label(item.Value, new { @class = "control-label" })
                                </li>
                            </ul>
                            if (item.Value.Length < 1)
                            {
                                <script>
                                    Swal.fire({
                                        type: 'error',
                                        title: 'Role is Required!',
                                        text: 'Select which best describes your business...',
                                    })
                                </script>
                            }
                        }
                    </div>
                </div>
                <div align="center">
                    <div class="col-xs-12">
                        @Html.ActionLink("Cancel", "Index")<span style="margin-left: 50px;"></span>
                        <button style="width: 180px;" class="btn btn-sm btn-success" type="submit"><i class="glyphicon glyphicon-ok-sign"></i> Save</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@section Scripts {
    <script>
        //$('#setRadius').replaceWith(localStorage.getItem("newRadius"));
        var map, marker, myLatlng;
        var Location;
        var LAT = $('#latitude').val();
        var LONG = $('#longitude').val();

        var NewRadius = $('#setRadius').replaceWith(localStorage.getItem("newRadius"));
        var current = @Model.Radius;

        myLatlng = new google.maps.LatLng(LAT, LONG);
        var mapOptions = {
            zoom: 5,
            center: myLatlng,
        }
        map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);

        google.maps.event.addListener(map, 'click', function () {
            infowindow.close();
        });

        marker = new google.maps.Marker({
            position: myLatlng,
            map: map,
            center: myLatlng,
            SameSite: true,
            draggable: true,
            animation: google.maps.Animation.DROP,
            title: "GtBilt"


        });
        var CicleOption = {
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 1,
            fillColor: '#FF0000',
            fillOpacity: 0.15,
            map: map,
            center: myLatlng,
            SameSite: true,
            Secure: true,
            radius: current * 1609.34,
        };
        new google.maps.Circle(CicleOption);
        marker.setMap(marker);
    </script>
    <script>
        $(document).ready(function () {
            var readURL = function (input) {
                if (input.files && input.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('.avatar').attr('src', e.target.result);
                    }
                    reader.readAsDataURL(input.files[0]);
                }
            }
            $(".file-upload").on('change', function () {
                readURL(this);
            });
        });
    </script>
    <script>
        $(document).ready(function () {

            const enforceFormat = (event) => {
                // Input must be of a valid number format or a modifier key, and not longer than ten digits
                if (!isNumericInput(event) && !isModifierKey(event)) {
                    event.preventDefault();
                }
            };

            const formatToPhone = (event) => {
                if (isModifierKey(event)) { return; }

                // I am lazy and don't like to type things more than once
                const target = event.target;
                const input = event.target.value.replace(/\D/g, '').substring(0, 10); // First ten digits of input only
                const zip = input.substring(0, 3);
                const middle = input.substring(3, 6);
                const last = input.substring(6, 10);


                if (input.length > 6) { target.value = `(${zip}) ${middle} - ${last}`; }
                else if (input.length > 3) { target.value = `(${zip}) ${middle}`; }
                else if (input.length > 0) { target.value = `(${zip})`; }
            };

            const inputElementa = document.getElementById('phoneNumber1');

            inputElementa.addEventListener('keydown', enforceFormat);
            inputElementa.addEventListener('keyup', formatToPhone);

            function RemoveCurrency(num) {
                return num.replace(/\$|,/g, '');
            }

        });
    </script>
    <script>
        $('.check_role').click(function () {
            $('.check_role').not(this).prop('checked', false);
        });
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}
